= slide 'Ако не винаги успявате от първият път' do
    list:
        Дебъгвайте
        Не скачайте с парашут
        Поне 80% от времето си ще прекарвате в търсене и поправяне на грешки
        Но ако имате добри тестове ще търсите грешки по-малко!

= slide 'Логаритмично дебъгване' do
    list:
        Дебъгването с print() е отличен начин за намиране на грешки
        Но ако имате грешка в програма от дори 3 файла отнема доста време
        Логаритмично време

= slide 'Дебъгване чрез логване' do
    example:
        import logging
        logging.basicConfig(level=logging.DEBUG)

        logging.debug("Just a debug message! DON'T PANIC")
        logging.info("Here, sir, have my info")
        logging.critical("OMGOMGOMGOMG")

    p Нива на логване, по ред на страшност:
    list:
        logging.DEBUG - за детайлна информация, обикновено полезна при дебъгване
        logging.INFO  - Потвърждение за това, че нещата работят както трябва
        logging.WARNING - Индикация за това че се случва нещо неочаквано, но не фатално
        logging.ERROR - По-сериозен проблем който пречи на програмата да свърши нещо
        logging.CRITICAL - Гадна грешка, програмата не може да продължи

    p Нивото по подразбиране е WARNING

= slide 'Пример' do
    example:
        logging.basicConfig(
               level=logging.DEBUG,
               filename='debug.txt',
               format='%(asctime)s %(levelname)s: %(message)s',
               datefmt='%Y-%m-%d %H:%M:%S'
        )

    p Използвайте logging вместо print() когато пишете пограма която е по-голяма от две прости функции, за да знаете винаги какво се случва.


= slide 'Хардкор дебуболечкване' do
    p Трудно е да се дебъгва с print()/logging когато програмата забива или отказва да работи
    example:
        >>> make_a_sandwich(for=me)
        'NO!'
        Segmentation fault (core dumped)

    p На помощ идват дебъгерите!
    list:
        pdb
        winpdb (A Platform Independent Python Debugger )
        и приятели

= slide 'PDB' do
    example:
        python -m pdb buggy.py
        > /buggy.py(1)<module>()
        -> from doomsday import Appocalypse
        (Pdb) 

    example:
        >>> import pdb
        >>> from doomsday import Appocalypse
        Traceback (most recent call last):
          File "/appocalypse.py", line 1, in <module>
          DeathAndDestruction
        >>> pdb.pm() # Post mortem

= slide 'PDB breakpoint' do
    p Breakpoint е място в което изпълнението на кода спира и се пуска дебъгера.

    example:
        import pdb
        from copy import deepcopy


        def bubblesort(data):
            data = deepcopy(data)
            for repeat in range(0, len(data)-1):
                index = 0
                while index < len(data) - 1:
                    if data[index] > data[index + 1]:
                        # Something smells fishy here
                        pdb.set_trace()
                        data[index], data[index + 1] = data[index + 1], data[index]
                    index += 1
            return data


= slide 'PDB breakpoint 2' do
    p Добавяне на breakpoint без пипане на кода

    example:
        $ python3 -m pdb python.py
        > /python.py(1)<module>()
        -> from food import sandwich
        (Pdb) break 42
        Breakpoint 1 at /python.py:42
        (Pdb) break 84
        Breakpoint 2 at /python.py:84

= slide 'PDB команди' do
    p Изглеждат много и страшни, но половината са синоними
    example:
        (Pdb) help

        Documented commands (type help <topic>):
        ========================================
        EOF    cl         disable  interact  next     return  u          where
        a      clear      display  j         p        retval  unalias  
        alias  commands   down     jump      pp       run     undisplay
        args   condition  enable   l         print    rv      unt      
        b      cont       exit     list      q        s       until    
        break  continue   h        ll        quit     source  up       
        bt     d          help     longlist  r        step    w        
        c      debug      ignore   n         restart  tbreak  whatis

= slide 'PDB команди 2' do
    list:
        l(ist) - показва кода около реда на който сме в момента
        n(ext) - минава на следващият ред в текущата ф-я
        c(cont/continue) - продължава програмата докъто не се достигне нов breakpoint
        s(step) - една стъпка. Започва да изпълнява следвашият ред, спира при първият изпълнен израз
        w(here) - показва call-стека (изпълнените досега функции)
        r(eturn) - изпълнява функцията в която сме в момента и спира преди тя да return-не
        b(reak)
        ... и (почти) произволен питон код

= slide 'Профилиране с cProfile' do
    p cProfile.run() приема произволен питонски код като низ
    example:
        import cProfile
        cProfile.run("answer_to_the_question_of_life_universe_and_everything()")

        import re
        cProfile.run('re.compile("6x9=?|42")')

    p Можете да пуснете и цяла програма:
    example:
        $ python -m cProfile -o <output-file-name> <script-name> <script-options>
 
= slide 'Herr Ackermann' do
    example:
        def ack(m, n):
            if m == 0:
                return n+1
            if n == 0:
                return ack(m-1, 1)
            return ack(m-1, ack(m, n-1))

    example:
        import cProfile
        cProfile.run("print(ack(3,4))")



= slide 'Визуализация с RunSnakeRun' do
    example:
        $ pip install runsnakerun
        $ runsnake <cProfile dump>

= slide 'Профилиране на памет' do
    p Дълго време в Питон нямаше стандартен модул за проследяване на паметта
    p От Python 3.4 вече има <code>tracemalloc</code>

    example:
        import tracemalloc
        
        tracemalloc.start()

        # ... балона се надува, надувайте момчета ...

        snapshot = tracemalloc.take_snapshot()
        top_stats = snapshot.statistics('lineno')

        # top 10 files allocating the most memory
        for stat in top_stats[:10]:
            print(stat)

= slide 'Кога да профилираме' do
    ul
      li.action Профилирането и оптимизирането на програми винаги отнемат много време
      li.action Твърде често виждаме и нови, и опитни програмисти които губят часове в оптимизация
      li.action ...и се оказва, че след оптимизиране печелят четвърт секунда процесорно време
      li.action Това е микрооптимизация
      li.action Първо, пишете код който работи
      li.action После го направете четлив и лесен за разбиране и дебъгване
      li.action Ако се окаже, че той е твърде бавен за приложението ви, чак тогава профилирайтe и оптимизирайте

