= slide '–ü–∏—Ç–∞–Ω–∫–∞' do
  example:
    try:
        print([3, 4, 5][6])
    except Exception as e:
        print('Oh man, oh man, oh man‚Ä¶')
        print(type(e))
    except KeyError as e:
        print('I seem to have misplaced my keys')
        print(type(e))
    except IndexError as e:
        print('It tends to happen with indexable stuff, bummer though.')
        print(type(e))
    except:
        print('I have no idea what just happened!')

  div.action
    example:
      Oh man, oh man, oh man‚Ä¶
      <class 'IndexError'>

= slide '–í—Ç–æ—Ä–∞ –ø–∏—Ç–∞–Ω–∫–∞' do
  p –ö–∞–∫–≤–æ –º–æ–∂–µ–º –¥–∞ <code>raise</code>-–≤–∞–º–µ –∏ <code>except</code>-–≤–∞–º–µ?
  p.action –Ω–∞—Å–ª–µ–¥–Ω–∏—Ü–∏ –Ω–∞ <code>BaseException</code>
  p.action –¢–æ–≥–∞–≤–∞ –∫–∞–∫ –¥–∞ —Å–∏ —Å—ä–∑–¥–∞–¥–µ–º –Ω–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–∏ –∏–∑–∫–ª—é—á–µ–Ω–∏—è?
  p.action –Ω–∞—Å–ª–µ–¥—è–≤–∞–º–µ –æ—Ç <code>Exception</code>

= slide 'n-—Ç–∞ –ø–∏—Ç–∞–Ω–∫–∞' do
  example:
    class Snitcher:
        def __init__(self, message):
            self.message = message

        def __enter__(self):
            print('I was told to warn you: {}'.format(self.message))

        def __exit__(self, error_type, error, traceback):
            if not error_type:
                print('It all went as expected')
            else:
                print('Well actually {}, and more specifically:{}'.format(error, traceback))

    with Snitcher("it's dangerous out there!"):
        print('Take this: üê± ')

= slide 'n-—Ç–∞ –ø–∏—Ç–∞–Ω–∫–∞' do
  p I was told to warn you: it's dangerous out there!
  p Take this: üê±
  p It all went as expected

= slide '–©–æ –µ —Ç–æ –∏—Ç–µ—Ä–∏—Ä–∞–Ω–µ' do
    p –û–±–∏–∫–Ω–æ–≤–µ–Ω–æ –∫–æ–ª–µ–∫—Ü–∏–∏—Ç–µ —Å—ä–¥—ä—Ä–∂–∞—Ç –¥–∞–Ω–Ω–∏, –∫–æ–∏—Ç–æ –∏—Å–∫–∞–º–µ –¥–∞ –æ–±—Ö–æ–∂–¥–∞–º–µ.
    p –ü–æ–Ω—è–∫–æ–≥–∞ —Ç–µ–∑–∏ –¥–∞–Ω–Ω–∏ –Ω–µ —Å–∞ –ø–æ–¥—Ä–µ–¥–µ–Ω–∏ –∏ –Ω—è–º–∞ –Ω–∞—á–∏–Ω –¥–∞ –≥–∏ –¥–æ—Å—Ç—ä–ø–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ.(<code>set</code>-–æ–≤–µ, <code>dict</code>-–æ–≤–µ)

= slide '–ö–∞–∫ –º–æ–∂–µ–º –¥–∞ –∏—Ç–µ—Ä–∏—Ä–∞–º–µ' do
    p —Å <code>for</code>

    example:
        for cheese in cheeses:
            print('-{0}?'.format(cheese))
            print('-No...')

= slide '–ö–∞–∫–≤–æ –º–æ–∂–µ–º –¥–∞ –∏—Ç–µ—Ä–∏—Ä–∞–º–µ' do
    p –ò—Ç–µ—Ä—É–µ–º–∏
    ul
        li <code>list</code>
        li <code>set</code>
        li <code>tuple</code>
        li <code>dict</code>
        li <code>range</code>
        li <code>map</code> –∏ <code>filter</code> –æ–±–µ–∫—Ç–∏
        li –≤—Å–∏—á–∫–æ –≤ collections
        li.action
            strong –≤—Å–µ–∫–∏ –æ–±–µ–∫—Ç –æ—Ç –∫–ª–∞—Å –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–∞—â <code>__getitem__</code>

= slide '–º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ vs. –µ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ' do
    p –ù—è–∫–æ–∏ –æ–±–µ–∫—Ç–∏ –º–æ–≥–∞—Ç –¥–∞ —Å–µ –∏—Ç–µ—Ä–∏—Ä–∞—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ(—Å–ø–∏—Å—ä—Ü–∏, –º–Ω–æ–∂–µ—Å—Ç–≤–∞...). –ù–æ –Ω–µ –≤—Å–∏—á–∫–∏.

    example:
        squares = map(lambda x: x ** 2, range(5))
        for number in squares:
            print(number)
        # 0 1 4 9 16 

        for number in squares:
            print(number)
        #

    p –û–±–∏–∫–Ω–æ–≤–µ–Ω–æ –º—ä—Ä–∑–µ–ª–∏–≤–∏—Ç–µ —Å–µ –∏—Ç–µ—Ä–∏—Ä–∞—Ç –ø–æ –≤–µ–¥–Ω—ä–∂.

= slide '__iter__' do
    p –ò–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω–µ—Ç–æ –Ω–µ –≤–∏–Ω–∞–≥–∏ –∏–º–∞ —Å–º–∏—Å—ä–ª, –≤—ä–ø—Ä–µ–∫–∏ —á–µ –æ–±–µ–∫—Ç–∞ –º–æ–∂–µ –¥–∞ —Å–µ –∏—Ç–µ—Ä–∏—Ä–∞ 
    p –ú–µ—Ç–æ–¥–∞ <code>__iter__</code> –≤—Ä—ä—â–∞ –æ–±–µ–∫—Ç-–∏—Ç–µ—Ä–∞—Ç–æ—Ä, —Å –∫–æ–π—Ç–æ –º–æ–∂–µ–º –¥–∞ –æ–±—Ö–æ–¥–∏–º –Ω–∞—à–∞—Ç–∞ "–∫–æ–ª–µ–∫—Ü–∏—è"
    p –ò—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –µ –æ–±–µ–∫—Ç, –ø–∞–∑–µ—â –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–æ –æ–±—Ö–æ–∂–¥–∞–Ω–µ –Ω–∞ –∫–æ–ª–µ–∫—Ü–∏—è
    p (–æ–±–µ–∫—Ç, –∫–æ–π—Ç–æ –∏–º–∞ <code>__next__</code> –º–µ—Ç–æ–¥)

= slide '__next__' do
    li –í—Ä—ä—â–∞ —Å–ª–µ–¥–≤–∞—â–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –≤ –æ–±—Ö–æ–∂–¥–∞–Ω–µ—Ç–æ
    li –ü—Ä–µ–¥–∏–∑–≤–∏–∫–≤–∞ —Å–ø–µ—Ü–∏–∞–ª–Ω–∞ –≥—Ä–µ—à–∫–∞(<code>StopIteration</code>) –∫–æ–≥–∞—Ç–æ –æ–±—Ö–æ–∂–¥–∞–Ω–µ—Ç–æ –ø—Ä–∏–∫–ª—é—á–∏

= slide 'dunders' do
    li <code>iter(a)</code> <=> <code>a.__iter__()</code>
    li <code>next(a)</code> <=> <code>a.__next__()</code>
    li –ò–º–∞ —Ä–µ–¥ –¥—Ä—É–≥–∏ –ø–æ–¥–æ–±–Ω–∏ –ø—Ä–∏–º–µ—Ä–∏, –∑–∞ –∫–æ–∏—Ç–æ –≤–µ—á–µ —Å–º–µ –≥–æ–≤–æ—Ä–∏–ª–∏

    div.action
        p <strong>–ó–∞–±–µ–ª–µ–∂–∫–∞:</strong> —Ç—Ä—è–±–≤–∞ –¥–∞ –∏–º–∞—Ç–µ –ú–ù–û–ì–û –î–û–ë–†–ê –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞, –∑–∞ –¥–∞ –ø–æ–ª–∑–≤–∞—Ç–µ <code>a.__method__()</code> –≤–º–µ—Å—Ç–æ <code>method(a)</code>
        p <strong>–ù–Ø–ú–ê–¢–ï</strong> —Ç–∞–∫–∞–≤–∞ –ø—Ä–∏—á–∏–Ω–∞

= slide '–ù–µ–∫–∞ —Å–µ –≤—ä–æ–±—Ä–∞–∑–∏–º –Ω–∞ for —Ü–∏–∫—ä–ª' do
    example:
        interjections = [
            'Ring-ding-ding-ding-dingeringeding!',
            'Wa-pa-pa-pa-pa-pa-pow!',
            'Hatee-hatee-hatee-ho!',
            'Joff-tchoff-tchoffo-tchoffo-tchoff!'
        ]
        iterator = iter(interjections)
        while True:
            try:
                interjection = next(iterator)
                print(interjection)
            except StopIteration:
                break

= slide '–ö–æ–π –∏—Ç–µ—Ä–∏—Ä–∞ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞?' do
    p –ò—Ç–µ—Ä–∞—Ç–æ—Ä–∏—Ç–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ç–µ –æ–±–µ–∫—Ç–∏ –≤ python —Å—ä—â–æ –∏–º–∞—Ç <code>__iter__</code> –º–µ—Ç–æ–¥, –∫–æ–π—Ç–æ –Ω–µ –ø—Ä–∞–≤–∏ –Ω–∏—â–æ –æ—Å–æ–±–µ–Ω–æ –∑–∞—à–µ–º–µ—Ç—è–≤–∞—â–æ
    example:
        >>> iterable = iter([1, 2, 3])
        >>> iter(iterable) is iterable
        True

= slide '–û–±–æ–±—â–µ–Ω–æ –∑–∞ iter' do
    p <code>iter</code> —Å–µ –æ–ø–∏—Ç–≤–∞ –¥–∞ –∏–∑–≤–∏–∫–∞ <code>__iter__</code> –º–µ—Ç–æ–¥–∞ –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å–∏, –Ω–æ –∞–∫–æ —Å–µ –æ–∫–∞–∂–µ, —á–µ —Ç–∞–∫—ä–≤ –Ω—è–º–∞ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–∞ –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–∑–≤–∏–∫–≤–∞ <code>__getitem__</code> —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–∏ —á–∏—Å–ª–∞ –∑–∞–ø–æ—á–≤–∞–π–∫–∏ –æ—Ç –Ω—É–ª–∞, –¥–æ–∫–∞—Ç–æ –Ω–µ —Å–µ —Ö–≤—ä—Ä–ª–∏ <code>StopIteration</code>

    example:
        class IterableThingie:
            def __getitem__(self, index):
                if index < 10:
                    return index * 2
                else:
                    raise StopIteration()

        it = IterableThingie()
        for i in it:
            print(i)

    p.action –ü—Ä–∏–Ω—Ç–∏—Ä–∞ 0, 2, 4, ‚Ä¶, 18

= slide '–û–±–æ–±—â–µ–Ω–æ –∑–∞ iter' do
    example:
        class IterableThingie:
            def __getitem__(self, index):
                if index < 10:
                    return index * 2
                else:
                    raise StopIteration()

            def __iter__(self):
                return iter('‚∞∞‚∞±‚∞≤‚∞≥‚∞¥‚∞µ‚∞∂‚∞∑‚∞∏‚∞π‚∞∫‚∞ª')

        it = IterableThingie()
        for i in it:
            print(i)

    p.action –ü—Ä–∏–Ω—Ç–∏—Ä–∞ ‚∞∞, ‚∞±, ‚∞≤, ‚∞≥, ‚∞¥, ‚∞µ, ‚∞∂, ‚∞∑, ‚∞∏, ‚∞π, ‚∞∫, ‚∞ª

= slide '–°—Ç—Ä–∞–∂–∞—Ä–∏ –∏ –∞–ø–∞—à–∏' do
  p –ò–º–∞ –≤—Ç–æ—Ä–∞ —Ñ–æ—Ä–º–∞ –Ω–∞ <code>iter</code>, –≤ –∫–æ—è—Ç–æ –ø—Ä–∏–µ–º–∞ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, –µ–¥–∏–Ω callable –æ–±–µ–∫—Ç –∏ –æ–±–µ–∫—Ç-—Å—Ç—Ä–∞–∂.

  p –í —Ç–æ–∑–∏ —Å–ª—É—á–∞–π –≤—ä—Ä–Ω–∞—Ç–∏—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä —â–µ –≤—Ä—ä—â–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏—Ç–µ –æ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏—Ç–µ –∏–∑–≤–∏–∫–≤–∞–Ω–∏—è –Ω–∞ callable –æ–±–µ–∫—Ç–∞, –¥–æ–∫–∞—Ç–æ —Ç–æ–π –Ω–µ –≤—ä—Ä–Ω–µ –æ–±–µ–∫—Ç–∞-—Å—Ç—Ä–∞–∂. (–ø–æ-—Å–∫–æ—Ä–æ –æ–±–µ–∫—Ç, –∫–æ–π—Ç–æ–ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—ä—Å —Å—Ç—Ä–∞–∂–∞ –≤—Ä—ä—â–∞ <code>True</code>)

  example:
      counter = 0
      def clbl():
          # WRITING CODE LIKE THIS WILL LIKELY RESULT
          # IN THE AGONIZING UNTIMELY DEATHS OF MANY
          # CUTE FURRY ANIMALS AND YOU WILL BE
          # SOLELY RESPONSIBLE!

          global counter
          counter += 1
          return counter

      iter(clbl, 23)
      list(_)

      # [1, 2, 3, ‚Ä¶, 22]


= slide '–ò—Ç–µ—Ä–∞—Ç–æ—Ä–∏—Ç–µ —Å–∞ –º—ä—Ä–∑–µ–ª–∏–≤–∏' do
    p –ö–∞–∑–∞—Ö–º–µ, —á–µ <code>map</code>, <code>filter</code> –∏ <code>range</code> —Å–∞ –º—ä—Ä–∑–µ–ª–∏–≤–∏. –¢–æ–≤–∞ –æ–∑–Ω–∞—á–∞–≤–∞, —á–µ –≤—Å–µ–∫–∏ –µ–ª–µ–º–µ–Ω—Ç —Å–µ <strong>–≥–µ–Ω–µ—Ä–∏—Ä–∞</strong> —á–∞–∫ –∫–æ–≥–∞—Ç–æ –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º.
    example:
        >>> odd = filter(lambda num: num % 2, range(10))
        >>> iter(odd) is odd
        True

= slide '–°–ª–µ–¥ –∫–∞—Ç–æ –≤–µ—á–µ –∑–Ω–∞–µ–º —Ç–æ–≤–∞' do
    p –ö–∞–∫–≤–æ —â–µ —Å–µ —Å–ª—É—á–∏ —Ç—É–∫?
    example:
        >>> loud_names = ['JEFF', 'STONE', 'MIKE', 'EDDIE', 'MATT']
        >>> quiet_names = map(lambda name: name.lower(), loud_names)
        >>> loud_names[3] = 'VEDDER'
        >>> print(list(quiet_names))

    div.action
        example:
            ['jeff', 'stone', 'mike', 'vedder', 'matt']

= slide 'sort' do
    p –∑–Ω–∞–µ–º –∑–∞ <code>sort</code> –º–µ—Ç–æ–¥–∞ –∏ –≤–≥—Ä–∞–¥–µ–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è <code>sorted</code>

    example:
        >>> numbers = [12, 15, 14, 10, 5, 7, 6]
        >>> print(numbers.sort())
        None
        >>> print(numbers)
        [5, 6, 7, 10, 12, 14, 15]

= slide 'sorted' do
    p –ò–º–∞ –≤–≥—Ä–∞–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è <code>sorted</code>

    example:
        >>> numbers = [12, 15, 14, 10, 5, 7, 6]
        >>> print(sorted(numbers))
        [5, 6, 7, 10, 12, 14, 15]
        >>> print(numbers)
        [12, 15, 14, 10, 5, 7, 6]

    p <strong>immutable –Ω–µ—â–∞—Ç–∞ —Å–∞ –º–Ω–æ–≥–æ –ø–æ-–ø—Ä–æ—Å—Ç–∏ –∑–∞ –ø–æ–ª–∑–≤–∞–Ω–µ –æ—Ç mutable –Ω–µ—â–∞—Ç–∞</strong>

= slide '–°–æ—Ä—Ç–∏—Ä–∞–Ω–µ –ø–æ –∫–ª—é—á' do
    p <code>sorted</code> –ø—Ä–∏–µ–º–∞ keyword –∞—Ä–≥—É–º–µ–Ω—Ç <code>key</code>, –∫–æ–π—Ç–æ –æ–∫–∞–∑–≤–∞ –∫–∞–∫ –¥–∞ —Å–µ –∏–∑–≤–ª–µ–∫–∞—Ç —Å—Ä–∞–≤–Ω–∏–º–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –æ—Ç –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ.

    example:
        >>> points = [(10, 3), (4, 8), (5, 9), (2, 3), (12, 6), (7, 4)]
        >>> sorted(points)
        [(2, 3), (4, 8), (5, 9), (7, 4), (10, 3), (12, 6)]
        >>> sorted(points, key=lambda point: point[1])
        [(10, 3), (2, 3), (7, 4), (12, 6), (4, 8), (5, 9)]

= slide 'reverse/reversed' do
    p –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ
    ul
        li <code>reverse</code> - –º–µ—Ç–æ–¥ –Ω–∞ <code>list</code>, –∫–æ–π—Ç–æ –æ–±—Ä—ä—â–∞ —Å–ø–∏—Å—ä–∫–∞ –Ω–∞ –º—è—Å—Ç–æ
        li <code>reversed</code> - –≤–≥—Ä–∞–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ –≤—Ä—ä—â–∞ –Ω–æ–≤–æ –∏—Ç–µ—Ä—É–µ–º–æ

    example:
        >>> numbers = [12, 15, 14, 10, 5, 7, 6]
        >>> reversed(numbers)
        <list_reverseiterator object at 0x7f14ff534490>
        >>> list(_)
        [6, 7, 5, 10, 14, 15, 12]

    p –ê–∫–æ –¥–æ–±–∞–≤—è—Ç–µ/–º–∞—Ö–∞—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–æ–∫–∞—Ç–æ –∏—Ç–µ—Ä–∏—Ä–∞—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –æ—Ç <code>reversed</code> –Ω—è–º–∞ –¥–∞ –æ—Å—Ç–∞–Ω–µ—Ç–µ –¥–æ–≤–æ–ª–Ω–∏

= slide '–ü–æ—á–∏–≤–∫–∞' do
  img src='07/spanish-inquisition.png'

= slide 'yield' do
    ul
        li.action –∞–ª–±—É–º –Ω–∞ "Pearl Jam"
        li.action –∑–Ω–∞–∫ "–î–∞–π –ø—Ä–µ–¥–∏–º—Å—Ç–≤–æ" –≤ –ö–∞–Ω–∞–¥–∞, –ò—Ä–ª–∞–Ω–¥–∏—è, –Æ–ê–†, –Æ–∂–Ω–∞ –ö–æ—Ä–µ—è –∏ –°–ê–©
        li.action –∫–ª—é—á–æ–≤–∞ –¥—É–º–∞ –≤ python

= slide '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏' do
    example:
        def actors_generator():
            yield 'Graham Chapman'
            yield 'John Cleese'
            yield 'Terry Gilliam'
            yield 'Eric Idle'
            yield 'Terry Jones'
            yield 'Michael Palin'

        actors = actors_generator()
        for actor in actors:
            print(actor + ' as seen on British TV')

= slide '–ó–∞—â–æ?' do
    p Iterator pattern
    example:
        class SquaresUpTo:
            def __init__(self, up_to):
                self.up_to = up_to
                self.num = 0

            def __iter__(self):
                return self

            def __next__(self):
                if self.num > self.up_to:
                    raise StopIteration

                square = self.num ** 2
                self.num += 1
                return square

= slide '–ó–∞—â–æ?' do
    p –ú–æ–∂–µ–º –¥–∞ –≥–æ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –µ—Ç–æ —Ç–∞–∫–∞
    example:
        squares = SquaresUpTo(100)

        for square in squares:
            print(square)

= slide '–° –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä' do
    example:
      def squares_up_to(number):
          value = 0
          while value <= number:
              yield value ** 2
              value += 1
          raise StopIteration

= slide '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏' do
    img src='07/oreo.jpg' style='height: 80%;'

= slide 'Generator expression' do
    p –ö–∞—Ç–æ list comprehension, –Ω–æ —Å –æ–±–ª–∏ —Å–∫–æ–±–∏ –∏ "–º—ä—Ä–∑–µ–ª–∏–≤":
    example:
       squares_up_to_ten = (number ** 2 for number in range(10))


= slide '–§—É–Ω–∫—Ü–∏–∏ –ø–æ —Ç–µ–º–∞—Ç–∞' do
    ul
        li <code>any</code>, <code>all</code>
        li <code>map</code>, <code>filter</code>
        li <code>list</code>, <code>tuple</code>, <code>set</code>
        li <code>enumerate</code>
        li <code>zip</code>

= slide '–ü—Ä–æ–≤–µ—Ä–∫–∏' do
    p –ê–∫–æ –∏—Å–∫–∞–º–µ –¥–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–ª–∏ –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –Ω–∞ –∏—Ç–µ—Ä—É–µ–º–æ –æ—Ç–≥–æ–≤–∞—Ä—è—Ç –Ω–∞ —É—Å–ª–æ–≤–∏–µ
    example:
        >>> all([True, True])
        True
        >>> all([True, False])
        False
        >>> any([True, False])
        True

= slide '–ö–∞–∫–≤–æ –ø—Ä–∞–≤—è—Ç map –∏ filter' do
    p –ü—Ä–∏–µ–º–∞—Ç –∏—Ç–µ—Ä—É–µ–º–∏ –∏ –≤—Ä—ä—â–∞—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∏.(<strong>2 vs. 3</strong>)

    p –ï—Ç–æ –¥–æ–±—ä—Ä –ø—Ä–∏–º–µ—Ä –∑–∞—â–æ —Ç–æ–≤–∞ –µ —Ö—É–±–∞–≤–∞ –∏–¥–µ—è:

    example:
        def numbers():
            num = 0
            while True:
                yield num
                num += 1

        doubles = map(lambda num: num*2, numbers())

= slide 'enumerate' do
    p –ö–æ–≥–∞—Ç–æ –∏–Ω–¥–µ–∫—Å–∏—Ç–µ –Ω–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–≤–∞—Ç

    example:
        >>> exclamations = ['–∫√≤–ª–∏', '–±√®—Å–∏', '—Å√®—á–∏']
        >>> for index, exclamation in enumerate(exclamations):
        ...     print('{0}. {1}!'.format(index, exclamation))
        ...

    div.action
        example:
            0. –∫√≤–ª–∏!
            1. –±√®—Å–∏!
            2. —Å√®—á–∏!


= slide 'zip' do
    p –ò—Ç–µ—Ä–∏—Ä–∞ –µ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω—è–∫–æ–ª–∫–æ –∏—Ç–µ—Ä—É–µ–º–∏

    example:
        titles = ['√Ünima', 'Lateralus', '10,000 Days']
        positions_US = [2, 1, 1]
        positions_UK = [108, 16, 4]
        template = 'Tool\'s {0} was at {1} in the US and at {2} in the UK'

        for title, us_pos, uk_pos in zip(titles, positions_US, positions_UK):
            print(template.format(title, us_pos, uk_pos))

= slide 'itertools' do
    p –£–¥–æ–±—Å—Ç–≤–∞ –∑–∞ —Ä–∞–±–æ—Ç–∞ —Å –∏—Ç–µ—Ä—É–µ–º–∏ –æ–±–µ–∫—Ç–∏.
    p –í—Å–∏—á–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–µ–≥–æ —Å–∞ ‚Äû–º—ä—Ä–∑–µ–ª–∏–≤–∏‚Äú.

= slide 'itertools.accumulate' do
    example:
        >>> from itertools import accumulate
        >>> sums = accumulate(range(1, 101), lambda a, b: a + b)
        >>> print(sums)
        <itertools.accumulate object at 0x7ff61d24b518>
        >>> next(sums)
        1
        >>> next(sums)
        3
        >>> next(sums)
        6
        >>> list(sums)[-1]
        5050

= slide 'itertools.chain' do
    p –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä–∞ –∏—Ç–µ—Ä—É–µ–º–∏
    example:
        >>> from itertools import chain
        >>> all_to_15 = chain(range(10), range(11, 15))
        >>> list(all_to_15)
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14]

= slide 'itertools.compress' do
    p –í—Ä—ä—â–∞ —á–∞—Å—Ç –æ—Ç –∏—Ç–µ—Ä—É–µ–º–æ —Å–ø–æ—Ä–µ–¥ –º–∞—Å–∫–∞
    example:
        >>> from itertools import compress
        >>> list(compress(range(10), [True, False]*5)
        [0, 2, 4, 6, 8]

= slide 'itertools.groupby' do
    p –ì—Ä—É–ø–∏—Ä–∞ —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç –æ—Ç –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–æ –∫–ª—é—á
    example:
        >>> from itertools import groupby
        >>> from collections import defaultdict
        >>> data = [ ('John', 'Tilsit'), ('Eric', 'Cheshire'), ('Michael', 'Camembert'),
        ...                  ('Terry', 'Gouda'), ('Terry', 'Port Salut'), ('Michael', 'Edam'),
        ...                  ('Eric', 'Ilchester'), ('John', 'Fynbo') ]
        >>> data = sorted(data, key=lambda record: record[0])
        >>> by_owner = defaultdict(list)
        >>> for key, group in groupby(data, lambda record: record[0]):
        ...     for record in group:
        ...         by_owner[key].append(record[1])
        ...
        >>> by_owner['Terry']
        ['Gouda', 'Port Salut']

= slide 'also starring' do
    ul
        li <code>itertools.repeat(objects[, times])</code> - –≤—Ä—ä—â–∞ –∏—Ç–µ—Ä—É–µ–º–æ —Å –æ–ø—Ä–µ–¥–ª–µ–Ω –±—Ä–æ–π(–∏–ª–∏ –±–µ–∑–∫—Ä–∞–π–Ω–æ –º–Ω–æ–≥–æ) –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ –µ–¥–∏–Ω –æ–±–µ–∫—Ç
        li <code>itertools.cycle(iterable)</code> - –±–µ–∑–∫—Ä–∞–π–Ω–∞ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –Ω–∞ –µ–¥–∏–Ω –∏—Ç–µ—Ä—É–µ–º –æ–±–µ–∫—Ç
        li <code>itertools.filterfalse(function, iterable)</code> - filter, —Ç—ä–ª–∫—É–≤–∞—â –ø—Ä–µ–¥–∏–∫–∞—Ç–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ(–∞–∫–æ function –µ None –≤—Ä—ä—â–∞ falsy –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ)
        li <code>itertools.permutations(iterable)</code> - –≥–µ–Ω–µ—Ä–∏—Ä–∞ –ø–µ—Ä–º—É—Ç–∞—Ü–∏–∏—Ç–µ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –≤ –∏—Ç–µ—Ä—É–µ–º–æ—Ç–æ
        li <code>itertools.product(*iterables [,repeat=1])</code> - –≤—Ä—ä—â–∞ –¥–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∏—Ç–µ—Ä—É–µ–º–∏
        li <code>itertools.takewhile(function, iterable)</code> - –≥–µ–Ω–µ—Ä–∏—Ä–∞ –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –Ω–∞ –∏—Ç–µ—Ä—É–µ–º–æ—Ç–æ, –¥–æ –ø—ä—Ä–≤–æ—Ç–æ –∫–æ–µ—Ç–æ –Ω–µ –æ—Ç–≥–æ–≤–∞—Ä—è –Ω–∞ –ø—Ä–µ–¥–∏–∫–∞—Ç–∞
        li <code>itertools.dropwhile(function, iterable)</code> - –≥–µ–Ω–µ—Ä–∏—Ä–∞ –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –Ω–∞ –∏—Ç–µ—Ä—É–µ–º–æ—Ç–æ, –æ—Ç –ø—ä—Ä–≤–æ—Ç–æ –∫–æ–µ—Ç–æ –Ω–µ –æ—Ç–≥–æ–≤–∞—Ä—è –Ω–∞ –ø—Ä–µ–¥–∏–∫–∞—Ç–∞ –Ω–∞—Ç–∞—Ç—ä–∫
        li <code>itertools.tee(iterable, n)</code> - –≤—Ä—ä—â–∞ –∫–æ—Ä—Ç–µ–∂ –æ—Ç n –Ω–µ–∑–∞–≤–∏—Å–∏–º–∏ –∏—Ç–µ—Ä—É–µ–º–∏

= slide 'itertools' do
    p EXPLORE!

    div.action
        example:
            import itertools
            dir(itertools)
            help(itertools)
